#!/bin/bash -x

############################ CALIBRATIONS ############################
# For TSLib
POINTERCAL_35r0="5724 -6 -1330074 26 8427 -1034528 65536"
POINTERCAL_35r90="5 8425 -978304 -5747 61 22119468 65536"
POINTERCAL_35r180="-5682 -1 22069150 13 -8452 32437698 65536"
POINTERCAL_35r270="3 -8466 32440206 5703 -1 -1308696 65536"

# for PIXEL desktop
TRANSFORM_35r0="-1.098388 0.003455 1.052099 0.005512 -1.093095 1.026309 0 0 1"
TRANSFORM_35r90="-0.000087 1.094214 -0.028826 -1.091711 -0.004364 1.057821 0 0 1"
TRANSFORM_35r180="1.102807 0.000030 -0.066352 0.001374 1.085417 -0.027208 0 0 1"
TRANSFORM_35r270="0.003893 -1.087542 1.025913 1.084281 0.008762 -0.060700 0 0 1"


warning() { 
	echo WARNING : $1
}

############################ Script assisters ############################


group=ADAFRUIT
function info() {
    system="$1"
    group="${system}"
    shift
    FG="1;32m"
    BG="40m"
    echo -e "[\033[${FG}\033[${BG}${system}\033[0m] $*"
}

function bail() {
    FG="1;31m"
    BG="40m"
    echo -en "[\033[${FG}\033[${BG}${group}\033[0m] "
    if [ -z "$1" ]; then
        echo "Exiting due to error"
    else
        echo "Exiting due to error: $*"
    fi
    exit 1
}


# Given a filename, a regex pattern to match and a replacement string,
# perform replacement if found, else append replacement to end of file.
# (# $1 = filename, $2 = pattern to match, $3 = replacement)
reconfig() {
    grep $2 $1 >/dev/null
    if [ $? -eq 0 ]; then
        # Pattern found; replace in file
        sed -i "s/$2/$3/g" $1 >/dev/null
    else
        # Not found; append (silently)
        echo $3 | sudo tee -a $1 >/dev/null
    fi
}


############################ Sub-Scripts ############################

function softwareinstall() {
    echo "Installing Pre-requisite Software...This may take a few minutes!"
    apt-get install -y bc fbi git python-dev python-pip python-smbus python-spidev evtest tslib libts-bin 1> /dev/null  || { warning "Apt failed to install software!" && exit 1; }
    pip install evdev 1> /dev/null  || { warning "Pip failed to install software!" && exit 1; }
}

# update /boot/config.txt with appropriate values
function update_configtxt() {
    if grep -q "adafruit-pitft-helper" "/boot/config.txt"; then
        echo "Already have an adafruit-pitft-helper section in /boot/config.txt."
        echo "Removing old section..."
        cp /boot/config.txt /boot/configtxt.bak
        sed -i -e "/^# --- added by adafruit-pitft-helper/,/^# --- end adafruit-pitft-helper/d" /boot/config.txt
    fi

    overlay="dtoverlay=pitft35-resistive,rotate=${pitftrot},speed=20000000,fps=20"
    date=`date`

    cat >> /boot/config.txt <<EOF
# --- added by adafruit-pitft-helper $date ---
dtparam=spi=on
dtparam=i2c1=on
dtparam=i2c_arm=on
$overlay
# --- end adafruit-pitft-helper $date ---
EOF
}

function update_udev() {
    cat > /etc/udev/rules.d/95-touchmouse.rules <<EOF
SUBSYSTEM=="input", ATTRS{name}=="touchmouse", ENV{DEVNAME}=="*event*", SYMLINK+="input/touchscreen"
EOF
    cat > /etc/udev/rules.d/95-ftcaptouch.rules <<EOF
SUBSYSTEM=="input", ATTRS{name}=="EP0110M09", ENV{DEVNAME}=="*event*", SYMLINK+="input/touchscreen"
EOF
    cat > /etc/udev/rules.d/95-stmpe.rules <<EOF
SUBSYSTEM=="input", ATTRS{name}=="*stmpe*", ENV{DEVNAME}=="*event*", SYMLINK+="input/touchscreen"
EOF
}

function update_pointercal() {
    echo $(eval echo "\$POINTERCAL_$pitfttype$pitftrot") > /etc/pointercal
}

function install_console() {
    echo "Set up main console turn on"
    if ! grep -q 'fbcon=map:10 fbcon=font:VGA8x8' /boot/cmdline.txt; then
        echo "Updating /boot/cmdline.txt"
        sed -i 's/rootwait/rootwait fbcon=map:10 fbcon=font:VGA8x8/g' "/boot/cmdline.txt"
    else
        echo "/boot/cmdline.txt already updated"
    fi

    echo "Turning off console blanking"
    # pre-stretch this is what you'd do:
    if [ -e /etc/kbd/config ]; then
      sed -i 's/BLANK_TIME=.*/BLANK_TIME=0/g' "/etc/kbd/config"
    fi
    # as of stretch....
    # removing any old version
    sed -i -e '/^# disable console blanking.*/d' /etc/rc.local
    sed -i -e '/^sudo sh -c "TERM=linux setterm -blank.*/d' /etc/rc.local
    sed -i -e "s|^exit 0|# disable console blanking on PiTFT\\nsudo sh -c \"TERM=linux setterm -blank 0 >/dev/tty0\"\\nexit 0|" /etc/rc.local

    reconfig /etc/default/console-setup "^.*FONTFACE.*$" "FONTFACE=\"Terminus\""
    reconfig /etc/default/console-setup "^.*FONTSIZE.*$" "FONTSIZE=\"6x12\""

    # echo "Setting raspi-config to boot to console w/o login..."
    # (cd ~pi && raspi-config nonint do_boot_behaviour B2)

    # remove fbcp
    sed -i -e "/^.*fbcp.*$/d" /etc/rc.local
}

function install_fbcp() {
    echo "Installing cmake..."
    apt-get --yes --force-yes install cmake 1> /dev/null  || { warning "Apt failed to install software!" && exit 1; }
    echo "Downloading rpi-fbcp..."
    cd /tmp
    #curl -sLO https://github.com/tasanakorn/rpi-fbcp/archive/master.zip
    curl -sLO https://github.com/adafruit/rpi-fbcp/archive/master.zip
    echo "Uncompressing rpi-fbcp..."
    rm -rf /tmp/rpi-fbcp-master
    unzip master.zip 1> /dev/null  || { warning "Failed to uncompress fbcp!" && exit 1; }
    cd rpi-fbcp-master
    mkdir build
    cd build
    echo "Building rpi-fbcp..."
    echo -e "\nset (CMAKE_C_FLAGS \"-std=gnu99 ${CMAKE_C_FLAGS}\")" >> ../CMakeLists.txt
    cmake ..  1> /dev/null  || { warning "Failed to cmake fbcp!" && exit 1; }
    make  1> /dev/null  || { warning "Failed to make fbcp!" && exit 1; }
    echo "Installing rpi-fbcp..."
    install fbcp /usr/local/bin/fbcp
    cd ~
    rm -rf /tmp/rpi-fbcp-master

    # Start fbcp in the appropriate place, depending on init system:
    if [ "$SYSTEMD" == "0" ]; then
        # Add fbcp to /etc/rc.local:
        echo "We have sysvinit, so add fbcp to /etc/rc.local..."
        grep fbcp /etc/rc.local >/dev/null
        if [ $? -eq 0 ]; then
            # fbcp already in rc.local, but make sure correct:
            sed -i "s|^.*fbcp.*$|/usr/local/bin/fbcp \&|g" /etc/rc.local >/dev/null
        else
            # Insert fbcp into rc.local before final 'exit 0':
            sed -i "s|^exit 0|/usr/local/bin/fbcp \&\\nexit 0|g" /etc/rc.local >/dev/null
        fi
    else
        # Install fbcp systemd unit, first making sure it's not in rc.local:
        uninstall_fbcp_rclocal
        echo "We have systemd, so install fbcp systemd unit..."
        install_fbcp_unit || bail "Unable to install fbcp unit file"
        sudo systemctl enable fbcp.service
    fi

    # if there's X11 installed...
    if [ -e /etc/lightdm ]; then
        echo "Setting raspi-config to boot to desktop w/o login..."
        raspi-config nonint do_boot_behaviour B4
    fi

    # Disable overscan compensation (use full screen):
    raspi-config nonint do_overscan 1
    # Set up HDMI parameters:
    echo "Configuring boot/config.txt for forced HDMI"
    reconfig /boot/config.txt "^.*hdmi_force_hotplug.*$" "hdmi_force_hotplug=1"
    reconfig /boot/config.txt "^.*hdmi_group.*$" "hdmi_group=2"
    reconfig /boot/config.txt "^.*hdmi_mode.*$" "hdmi_mode=87"

    # if there's X11 installed...
    if [ -e /etc/lightdm ]; then
        echo "Using x1.5 resolution"
        SCALE=1.5
    else
        echo "Using native resolution"
        SCALE=1
    fi
    WIDTH=`python -c "print(int(480 * ${SCALE}))"`
    HEIGHT=`python -c "print(int(320 * ${SCALE}))"`
    reconfig /boot/config.txt "^.*hdmi_cvt.*$" "hdmi_cvt=${WIDTH} ${HEIGHT} 60 1 0 0 0"

    if [ "${pitftrot}" == "90" ] || [ "${pitftrot}" == "270" ]; then
        # dont rotate HDMI on 90 or 270
        reconfig /boot/config.txt "^.*display_hdmi_rotate.*$" ""
    fi

    if [ "${pitftrot}" == "0" ]; then
        reconfig /boot/config.txt "^.*display_hdmi_rotate.*$" "display_hdmi_rotate=1"
        # this is a hack but because we rotate HDMI we have to 'unrotate' the TFT!
        pitftrot=90
        update_configtxt || bail "Unable to update /boot/config.txt"
        pitftrot=0
    fi
    if [ "${pitftrot}" == "180" ]; then
        reconfig /boot/config.txt "^.*display_hdmi_rotate.*$" "display_hdmi_rotate=3"
        # this is a hack but because we rotate HDMI we have to 'unrotate' the TFT!
        pitftrot=90
        update_configtxt || bail "Unable to update /boot/config.txt"
        pitftrot=180
    fi
}

function install_fbcp_unit() {
    cat > /etc/systemd/system/fbcp.service <<EOF
[Unit]
Description=Framebuffer copy utility for PiTFT
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/fbcp

[Install]
WantedBy=multi-user.target
EOF
}

function uninstall_fbcp() {
    uninstall_fbcp_rclocal
    # Enable overscan compensation
    raspi-config nonint do_overscan 0
    # Set up HDMI parameters:
    echo "Configuring boot/config.txt for default HDMI"
    reconfig /boot/config.txt "^.*hdmi_force_hotplug.*$" "hdmi_force_hotplug=0"
    sed -i -e '/^hdmi_group=2.*$/d' /boot/config.txt
    sed -i -e '/^hdmi_mode=87.*$/d' /boot/config.txt
    sed -i -e '/^hdmi_cvt=.*$/d' /boot/config.txt
}

function uninstall_fbcp_rclocal() {
    # Remove fbcp from /etc/rc.local:
    echo "Remove fbcp from /etc/rc.local, if it's there..."
    sed -i -e '/^.*fbcp.*$/d' /etc/rc.local
}

function update_xorg() {
    matrix=$(eval echo "\$TRANSFORM_$pitfttype$pitftrot")
    transform="Option \"TransformationMatrix\" \"${matrix}\""
cat > /usr/share/X11/xorg.conf.d/20-calibration.conf <<EOF
Section "InputClass"
        Identifier "STMPE Touchscreen Calibration"
        MatchProduct "stmpe"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        ${transform}
EndSection
EOF
}

function main() {
    target_homedir="/home/pi"
    PITFT_SELECT=4
    PITFT_ROTATE=3

    SYSTEMD=1

    PITFT_ROTATIONS=("90" "180" "270" "0")
    pitftrot=${PITFT_ROTATIONS[$PITFT_ROTATE-1]}
    pitfttype=35r

    info PITFT "Installing Python libraries & Software..."
    softwareinstall || bail "Unable to install software"

    info PITFT "Updating /boot/config.txt..."
    update_configtxt || bail "Unable to update /boot/config.txt"

    info PITFT "Updating SysFS rules for Touchscreen..."
    update_udev || bail "Unable to update /etc/udev/rules.d"

    info PITFT "Updating TSLib default calibration..."
    update_pointercal || bail "Unable to update /etc/pointercal"

    info PITFT "Updating console to PiTFT..."
    uninstall_fbcp  || bail "Unable to uninstall fbcp"
    install_console || bail "Unable to configure console"

    #if ask "Would you like the HDMI display to mirror to the PiTFT display?"; then
    #    info PITFT "Adding FBCP support..."
    #    install_fbcp || bail "Unable to configure fbcp"
    #
    #    if [ -e /etc/lightdm ]; then
    #        info PITFT "Updating X11 default calibration..."
    #        update_xorg || bail "Unable to update calibration"
    #    fi
    #fi

    info PITFT "Success!"

    reboot now
}

if [ "$0" = "$BASH_SOURCE" ]; then main; fi
